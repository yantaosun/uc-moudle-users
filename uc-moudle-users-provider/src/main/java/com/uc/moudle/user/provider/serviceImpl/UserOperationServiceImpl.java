package com.uc.moudle.user.provider.serviceImpl;import com.uc.moudle.user.api.enums.ErrorCode;import com.uc.moudle.user.api.exception.CommonBusinessException;import com.uc.moudle.user.api.service.UserOperationService;import com.uc.moudle.user.provider.mappers.SysRoleAuthMapper;import com.uc.moudle.user.provider.mappers.UcMembersMapper;import com.ucs.moudlecommon.domain.SysUsers;import com.ucs.moudlecommon.params.sysuser.Find_UserInfoArg;import com.ucs.moudlecommon.params.sysuser.UserAndRolesInfo;import com.ucs.moudlecommon.response.BaseResponse;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Service;import org.springframework.transaction.annotation.Isolation;import org.springframework.transaction.annotation.Propagation;import org.springframework.transaction.annotation.Transactional;import java.util.List;import java.util.Objects;/** * @author 9527 * @ClassName UserOperationBusiness * @Date 2020/1/20 * @Description TODO * @Version 1.0 */@Service("UserOperationBusiness")public class UserOperationServiceImpl implements UserOperationService {    private Logger logger = LoggerFactory.getLogger(UserOperationServiceImpl.class);    @Autowired    private UcMembersMapper ucMembersMapper;    @Autowired    private SysRoleAuthMapper sysRoleAuthMapper;    @Override    @Transactional(propagation = Propagation.REQUIRED ,isolation = Isolation.DEFAULT,rollbackFor = {Exception.class})    public BaseResponse findUserInfo(Find_UserInfoArg arg) throws Exception {        BaseResponse resp = new BaseResponse();        if(arg == null){            throw  new CommonBusinessException(ErrorCode.NULLPARAMETER.getCode(),ErrorCode.NULLPARAMETER.getMessage());        }        SysUsers member = ucMembersMapper.findByParam(arg);        resp.setCode(0);        resp.setMessage("执行成功");        resp.setResult(member);        return resp;    }    @Override    @Transactional(propagation = Propagation.REQUIRED ,isolation = Isolation.DEFAULT,rollbackFor = {Exception.class})    public BaseResponse saveUser(SysUsers arg) throws Exception {        BaseResponse resp = new BaseResponse();        if(arg == null){            throw  new CommonBusinessException(ErrorCode.NULLPARAMETER.getCode(),ErrorCode.NULLPARAMETER.getMessage());        }        Integer id = ucMembersMapper.saveSysUsers(arg);        resp.setCode(0);        resp.setMessage("执行成功");        resp.setResult(id);        return resp;    }    @Override    public BaseResponse<UserAndRolesInfo>   findUserAndRoleInfo(Find_UserInfoArg arg) throws Exception {        BaseResponse resp = new BaseResponse();        if(arg == null){            throw  new CommonBusinessException(ErrorCode.NULLPARAMETER.getCode(),ErrorCode.NULLPARAMETER.getMessage());        }        UserAndRolesInfo info = null;        SysUsers member = ucMembersMapper.findByParam(arg);        if(!Objects.isNull(member)){            info = new UserAndRolesInfo();            List<String> auths = sysRoleAuthMapper.findUserRoles(arg);            info.setUsers(member);            info.setAuths(auths);        }        resp.setSuccess(true);        resp.setResult(info);        return resp;    }}