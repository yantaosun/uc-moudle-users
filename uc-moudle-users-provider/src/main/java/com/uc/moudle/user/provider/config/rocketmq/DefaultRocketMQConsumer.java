package com.uc.moudle.user.provider.config.rocketmq;import org.apache.rocketmq.client.consumer.DefaultMQPushConsumer;import org.apache.rocketmq.client.exception.MQClientException;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.beans.factory.annotation.Value;import org.springframework.context.annotation.Bean;import org.springframework.stereotype.Component;/** * @author 9527 * @ClassName RocketMQConsumer * @Date 2020/1/21 * @Description TODO * @Version 1.0 */@Componentpublic class DefaultRocketMQConsumer {    private Logger logger = LoggerFactory.getLogger(DefaultRocketMQConsumer.class);    @Autowired    private MessageProcessor messageProcessor;    @Value("${user.rocketmq.namesrvAddr}")    private String namesrvAddr;    @Value("${user.rocketmq.groupName}")    private String groupName;    @Value("${user.rocketmq.topic}")    private String topic;    @Value("${user.rocketmq.consumeThreadMin}")    private int consumeThreadMin;    @Value("${user.rocketmq.consumeThreadMax}")    private int consumeThreadMax;    @Value("${user.rocketmq.tag}")    private String tag;    @Bean    public DefaultMQPushConsumer getRocketMQConsumer()    {        DefaultMQPushConsumer consumer = new DefaultMQPushConsumer(groupName);        consumer.setNamesrvAddr(namesrvAddr);        consumer.setConsumeThreadMin(consumeThreadMin);        consumer.setConsumeThreadMax(consumeThreadMax);        consumer.setVipChannelEnabled(false);        MessageListen messageListen = new MessageListen();        messageListen.setMessageProcessor(messageProcessor);        consumer.registerMessageListener(messageListen);        try {            consumer.subscribe(topic,tag);            consumer.start();            logger.info("consume is start ,groupName:{},topic:{}",groupName,topic);        } catch (MQClientException e) {            logger.error("consume start error");            e.printStackTrace();        }        return consumer;    }}