package com.uc.moudle.user.provider.config.elasticsearch;import org.apache.commons.lang.StringUtils;import org.apache.http.HttpHost;import org.apache.http.auth.AuthScope;import org.apache.http.auth.UsernamePasswordCredentials;import org.apache.http.client.CredentialsProvider;import org.apache.http.impl.client.BasicCredentialsProvider;import org.elasticsearch.client.RestClient;import org.elasticsearch.client.RestClientBuilder;import org.elasticsearch.client.RestHighLevelClient;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.context.annotation.Bean;import org.springframework.context.annotation.Configuration;import org.springframework.util.Assert;import java.util.ArrayList;import java.util.List;/** * @author 9527 * @ClassName RestHighLevelClient * @Date 2020/1/19 * @Description TODO * @Version 1.0 */@Configurationpublic class CustomRestHighLevelClient {    private Logger logger = LoggerFactory.getLogger(CustomRestHighLevelClient.class);    @Autowired    private RestHighLevelClientConfigProperties restHighLevelClientConfigProperties;    @Bean    public RestHighLevelClient initializationRestHighLevelClient(){        List<HttpHost> httpHosts = new ArrayList<>();        List<String> clusterNodes = restHighLevelClientConfigProperties.getClusterNodes();        clusterNodes.forEach(node ->{            try{                String[] parts = StringUtils.split(node, ":");                Assert.notNull(parts, "elasticsearch must defined");                Assert.state(parts.length == 2, "elasticsearch must be defined as 'host:port'");                httpHosts.add(new HttpHost(parts[0], Integer.parseInt(parts[1]), restHighLevelClientConfigProperties.getSchema()));            }catch (Exception e){                throw new IllegalStateException("Invalid ES nodes property '" + node + "'", e);            }        });        RestClientBuilder builder = RestClient.builder(httpHosts.toArray(new HttpHost[0]));        final CredentialsProvider credentialsProvider = new BasicCredentialsProvider();        credentialsProvider.setCredentials(AuthScope.ANY, new UsernamePasswordCredentials(restHighLevelClientConfigProperties.getUsername(), restHighLevelClientConfigProperties.getPassword()));        builder.setRequestConfigCallback(                requestConfigBuilder -> requestConfigBuilder.setConnectTimeout(restHighLevelClientConfigProperties.getConnectTimeout()).setSocketTimeout(restHighLevelClientConfigProperties.getSocketTimeout()));        RestHighLevelClient client = new RestHighLevelClient(builder);        logger.info("RestHighLevelClient init success");        return client;    }}