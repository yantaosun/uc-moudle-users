package com.uc.moudle.user.provider.config.interceptors;import com.uc.moudle.user.api.enums.ErrorCode;import com.ucs.moudlecommon.constant.SignatureConstant;import com.ucs.moudlecommon.util.AESUtil;import org.apache.commons.lang3.StringUtils;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import org.springframework.stereotype.Component;import org.springframework.web.servlet.HandlerInterceptor;import org.springframework.web.servlet.ModelAndView;import javax.servlet.ServletInputStream;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;import java.io.BufferedReader;import java.io.IOException;import java.io.InputStreamReader;import java.util.HashMap;import java.util.Map;/** * @author 9527 * @ClassName CustomRequestInterceptor * @Date 2020/2/15 * @Description TODO * @Version 1.0 */@Componentpublic class CustomRequestInterceptor implements HandlerInterceptor {    private Logger logger = LoggerFactory.getLogger(CustomRequestInterceptor.class);    @Override    public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception {        if(request.getMethod().equals("POST")){            String signature = request.getHeader("signature");            String timestamp = request.getHeader("timestamp");            Map map = new HashMap();            map.put("prefix", SignatureConstant.commonSignaturePrefix);            map.put("timestamp",timestamp);            map.put("suffix", SignatureConstant.commonSignatureSuffix);            String res = AESUtil.genSignature(SignatureConstant.commonSignatureKey,map);            if(StringUtils.isBlank(signature) || !res.equals(signature)){                logger.warn("签名验证失败");                response.sendError(ErrorCode.SignatureFAIL.getCode(),ErrorCode.SignatureFAIL.getMessage());                return false;            }            return true;        }else if(request.getMethod().equals("GET")){            //GET验证待定            return true;        }        return true;    }    @Override    public void postHandle(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView) throws Exception {    }    @Override    public void afterCompletion(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex) throws Exception {    }    public  String getRequestBody(HttpServletRequest request) {        StringBuffer stringBuffer = new StringBuffer();        try (ServletInputStream servletInputStream = request.getInputStream()){            String line = null;            BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(servletInputStream));            while ((line = bufferedReader.readLine()) != null) {                stringBuffer.append(line);            }        } catch (IOException e) {           e.printStackTrace();        }        return stringBuffer.toString();    }}